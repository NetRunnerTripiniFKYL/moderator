import os
import json
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter

router = Router()


LOG_PATH = "data/logs.json"

# –ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∞–≤–∞–º (–≤ –±–æ—é –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
async def is_admin(message: Message) -> bool:
    member = await message.chat.get_member(message.from_user.id)
    return member.status in ("administrator", "creator")


@router.message(Command("log"))
async def cmd_log(message: Message):
    if not await is_admin(message):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    
    if not os.path.exists(LOG_PATH):
        return await message.answer("–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    with open(LOG_PATH, "r", encoding="utf-8") as f:
        try:
            logs = json.load(f)
        except json.JSONDecodeError:
            return await message.answer("‚ö†Ô∏è –õ–æ–≥–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")

    last_logs = logs[-5:] if len(logs) >= 5 else logs
    text = "\n\n".join(
        f"{log['user_id']} ‚Äî {log['action']}:\n{log['message']}"
        for log in last_logs
    )
    await message.answer(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")


@router.message(Command("logall"))
async def cmd_logall(message: Message):
    if not await is_admin(message):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    
    if not os.path.exists(LOG_PATH):
        return await message.answer("–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    await message.answer_document(FSInputFile(LOG_PATH), caption="üìÇ –ü–æ–ª–Ω—ã–π –ª–æ–≥")

@router.message(Command("cleanlog"))
async def cmd_cleanlog(message: Message):
    if not await is_admin(message):
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    
    if not os.path.exists(LOG_PATH):
        return await message.answer("üìÇ –õ–æ–≥ —É–∂–µ –ø—É—Å—Ç.")

    try:
        os.remove(LOG_PATH)
        await message.answer("üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥: {e}")